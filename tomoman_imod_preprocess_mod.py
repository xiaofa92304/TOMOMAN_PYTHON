import os
import numpy as np
import subprocess

def tomoman_imod_preprocess_mod_GQ(tomolist, p, imod_param, write_list):
    """
    Python version of tomoman_imod_preprocess_mod function
    
    Parameters:
    -----------
    tomolist : list of dict
        List of tomogram information dictionaries
    p : dict
        Parameters dictionary
    imod_param : dict
        IMOD parameters dictionary
    write_list : bool
        Whether to write the updated tomolist to disk
    
    Returns:
    --------
    tomolist : list of dict
        Updated tomolist
    """
    
    endnum = 0
    

    # Check for skip
    if not tomolist['skip']:
        process = True
    else:
        process = False
        
    # Check for previous alignment
    if process and not tomolist['imod_preprocessed']:
        process = True
    else:
        process = False
        
    # Check for force_realign
    if bool(imod_param['force_imod']) and not tomolist['skip']:
        process = True
    
    # Perform IMOD preprocessing
    if process:
        print(f"TOMOMAN: Initializing batch processing for stack {tomolist['dose_filtered_stack_name']}")
        
        if imod_param['force_imod']:
            dfname, dfext = os.path.splitext(os.path.basename(tomolist['dose_filtered_stack_name']))
            orig_file = os.path.join(tomolist[i]['stack_dir'], f"{dfname}_orig{dfext}")
            if os.path.exists(orig_file):
                print(f"TOMOMAN: Forced repeat preprocessing... Original tilt stack {dfname}_orig{dfext} found and will be used...")
                os.rename(orig_file, os.path.join(tomolist['stack_dir'], tomolist['dose_filtered_stack_name']))
        
        # Initialize adoc output
        adoc_path = os.path.join(tomolist['stack_dir'], 'preprocess.adoc')
        with open(adoc_path, 'w') as adoc:
            adoc.write("# An adoc file for preprocessing generated by tomoman_imod_preprocess \n\n")
            adoc.write(f"setupset.datasetDirectory={tomolist['stack_dir']}\n")
            
            # Copytomocoms
            if imod_param['copytomocoms'] == 1:
                name = os.path.splitext(os.path.basename(tomolist['dose_filtered_stack_name']))[0]
                adoc.write(f"setupset.copyarg.name={name}\n")
                adoc.write(f"setupset.copyarg.dual=0\n")
                adoc.write(f"setupset.copyarg.pixel={tomolist['pixelsize']/10}\n")
                adoc.write(f"setupset.copyarg.gold={imod_param['goldsize']}\n")
                adoc.write(f"setupset.copyarg.rotation={tomolist['tilt_axis_angle']}\n")
                adoc.write("setupset.copyarg.userawtlt=1\n")
            
            # CCD Eraser
            if imod_param['ccderaser'] == 1:
                adoc.write("runtime.Preprocessing.any.removeXrays=1\n")
                if imod_param['archiveoriginal'] == 1:
                    adoc.write("runtime.Preprocessing.any.archiveOriginal=1\n")
                endnum = 1
            
            # Coarse alignment
            if imod_param['coarsealign'] == 1:
                # pretilt
                if imod_param['pretilt'] != 0:
                    if abs(min(tomolist['collected_tilts'])) > abs(max(tomolist['collected_tilts'])):
                        adoc.write(f"comparam.xcorr.tiltxcorr.AngleOffset={imod_param['pretilt']}\n")
                    else:
                        adoc.write(f"comparam.xcorr.tiltxcorr.AngleOffset=-{imod_param['pretilt']}\n")
                
                # trimming
                if imod_param['trimming'] != 0:
                    adoc.write(f"comparam.xcorr.tiltxcorr.BordersInXandY={imod_param['trimming']},{imod_param['trimming']}\n")
                
                adoc.write(f"comparam.prenewst.newstack.BinByFactor={imod_param['coarsealignbin']}\n")
                adoc.write(f"comparam.prenewst.newstack.AntialiasFilter={imod_param['coarseantialias']}\n")
                adoc.write(f"comparam.prenewst.newstack.ModeToOutput={imod_param['convbyte']}\n")
                endnum = 3
            
            # Autoseed
            if imod_param['autoseed'] == 1:
                adoc.write("runtime.Fiducials.any.trackingMethod=0\n")
                adoc.write("runtime.Fiducials.any.seedingMethod=1\n")
                adoc.write(f"comparam.track.beadtrack.LocalAreaTracking={imod_param['localareatracking']}\n")
                adoc.write(f"comparam.track.beadtrack.LocalAreaTargetSize={imod_param['localareasize']}\n")
                adoc.write(f"comparam.track.beadtrack.SobelFilterCentering={imod_param['sobelfilter']}\n")
                adoc.write(f"comparam.track.beadtrack.KernelSigmaForSobel={imod_param['sobelkernel']}\n")
                adoc.write(f"comparam.track.beadtrack.RoundsOfTracking={imod_param['n_rounds']}\n")
                adoc.write(f"runtime.BeadTracking.any.numberOfRuns={imod_param['n_runs']}\n")
                adoc.write(f"comparam.autofidseed.autofidseed.TwoSurfaces={imod_param['two_surf']}\n")
                adoc.write(f"comparam.autofidseed.autofidseed.TargetNumberOfBeads={imod_param['n_beads']}\n")
                adoc.write(f"comparam.autofidseed.autofidseed.AdjustSizes={imod_param['adjustsize']}\n")
                endnum = 5
            
            # Patchtracking
            if imod_param['patchtrack'] == 1:
                adoc.write("runtime.Fiducials.any.trackingMethod=1\n")
                adoc.write(f"comparam.xcorr_pt.tiltxcorr.SizeOfPatchesXandY={imod_param['patchsizeX']} {imod_param['patchsizeY']}\n")
                adoc.write(f"comparam.xcorr_pt.tiltxcorr.IterateCorrelations={imod_param['IterateCorrelations']}\n")
                adoc.write(f"comparam.xcorr_pt.tiltxcorr.OverlapOfPatchesXandY={imod_param['OverlapOfPatchesXandY']} {imod_param['OverlapOfPatchesXandY']}\n")
                adoc.write("runtime.PatchTracking.any.adjustTiltAngles=1\n")
                endnum = 4
            
            # Alignment
            if imod_param['Align'] == 1:
                adoc.write("comparam.align.tiltalign.SurfacesToAnalyze=1\n")
                adoc.write("comparam.align.tiltalign.LocalAlignments=0\n")
                adoc.write(f"comparam.align.tiltalign.RobustFitting={imod_param['RobustFitting']}\n")
                adoc.write(f"comparam.align.tiltalign.KFactorScaling={imod_param['KFactorScaling']}\n")
                adoc.write("comparam.align.tiltalign.WeightWholeTracks=1\n")
                adoc.write(f"comparam.align.tiltalign.RotOption={imod_param['RotOption']}\n")
                adoc.write(f"comparam.align.tiltalign.TiltOption={imod_param['TiltOption']}\n")
                adoc.write(f"comparam.align.tiltalign.MagOption={imod_param['MagOption']}\n")
                endnum = 6
            
            # Positioning
            if imod_param['positioning'] == 1:
                adoc.write("runtime.Positioning.any.sampleType=0\n")
                adoc.write("runtime.Positioning.any.wholeTomogram=1\n")
                adoc.write("runtime.Positioning.any.binByFactor=8\n")
                adoc.write("runtime.Positioning.any.thickness=1600\n")
                endnum = 7
        
        # Run batchtomorun
        print("TOMOMAN: Running IMOD preprocessing...")
        subprocess.run([
            'batchruntomo', 
            '-directive', adoc_path, 
            '-end', str(endnum)
        ])
        print(f"TOMOMAN: IMOD preprocessing on stack {tomolist['dose_filtered_stack_name']} complete!!!!")
        
        # Update tomolist
        tomolist['imod_preprocessed'] = True
        
        # Save tomolist
        if write_list:
            import pickle
            with open(os.path.join(p['root_dir'], p['tomolist_name']), 'wb') as f:
                pickle.dump(tomolist, f)

    return tomolist